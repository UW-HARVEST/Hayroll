Hi Vikram,

I suspected that it was because libcpp2c.so was not properly built before running analyze_macro_invocations_in_program.py. Here is an updated list of steps to run Hayroll:

in Maki (modified version) folder:
// We install Maki locally instead of using docker, to make sure that analyze_macro_invocations_in_program.py can find libcpp2c.so and run in the same environment as limcs at the same time
// Standard CMake build steps, please solve dependency issues along the way according to dockerfile
mkdir build
cd build
cmake ..
make
// You should see: [100%] Linking CXX shared library ../lib/libcpp2c.so
// You should see: [100%] Built target cpp2c

in libmcs folder:
// I recommend using version 1.2.0 of libmcs
// Standard setup steps for libmcs, according to limbcs docs
./configuge
bear -- make // or whatever that generates compile_commands.json
// Manually modify the compile_commands.json so that there is only one target left inside. I recommend one that includes macro invocations, e.g., mathf/sinhf.c)
// Make sure that ../Maki/build/lib/libcpp2c.so actually exists
../Maki/evaluation/analyze_macro_invocations_in_program.py "../Maki/build/lib/libcpp2c.so" "./" "./libm/" "./macro_invocation_analyses/" 16

in Hayroll folder:
// I recommend using commit 3e61bae404c9d9f33dfc87367643e80b96379a8a, the Jan 23 version
./build.bash
// You should see soft links seeder and ws appearing in the folder
./seeder ../libmcs/macro_invocation_analyses/all_results.cpp2c ../libmcs/libm/ &> trace.txt
// Warning: the previous step could modify more than one file in libmcs â€” it could modify both .c and .h files that the .c file includes. Please reset libmcs before running on another file

in libmcs folder:
c2rust transpile ./compile_commands.json

in Hayroll folder:
./reaper ../libmcs &> trace.txt
// This step could take as unreasonably long as 5 mins

Please feel free to reach out to me if you have any questions. Have fun!

Best,
Haoran